{"version":3,"file":"static/js/33.9b58a249.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/ButtonGroup.js","../node_modules/react-bootstrap/esm/ToggleButton.js","components/misc/BridgePanel/BridgeCard.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, { ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Button from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst noop = () => undefined;\n\nconst ToggleButton = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  name,\n  className,\n  checked,\n  type,\n  onChange,\n  value,\n  disabled,\n  id,\n  inputRef,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'btn-check');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      className: bsPrefix,\n      name: name,\n      type: type,\n      value: value,\n      ref: inputRef,\n      autoComplete: \"off\",\n      checked: !!checked,\n      disabled: !!disabled,\n      onChange: onChange || noop,\n      id: id\n    }), /*#__PURE__*/_jsx(Button, { ...props,\n      ref: ref,\n      className: classNames(className, disabled && 'disabled'),\n      type: undefined,\n      role: undefined,\n      as: \"label\",\n      htmlFor: id\n    })]\n  });\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;","import React, {useState, useEffect} from 'react';\r\nimport {Button, Card, Dropdown,Form, FormControl, InputGroup, ToggleButton, ButtonGroup, Spinner} from \"react-bootstrap\";\r\nimport { useGlobalContext } from '../../../context/context';\r\n\r\n\r\n//TODO: Transfer pri max value ne gre uredu skozi.\r\nconst BridgeCard = () => {\r\n    const {chains, cookies, apiUserBridge, user, activeChain, usersBalances, bridges, setNote} = useGlobalContext();\r\n    let [amount, setAmount] = useState(null);\r\n    let [fee, setFee] = useState(null);\r\n    let [bridge, setBridge] = useState(0);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [direction, setDirection] = useState('1');\r\n\r\n    const directions = [\r\n        { name: 'Deposit', value: '1' },\r\n        { name: 'Withdraw', value: '2' }\r\n    ];\r\n\r\n\r\n    async function transfer(){\r\n        console.log(\"Amount: \"+ amount);\r\n        //TODO: Ne dela, nevem zakaj. Poglej zakaj\r\n        // context.setNote({...(note.show = true)});\r\n    }\r\n\r\n    //TODO: Popravi, da bo vleklo pravilen max amount\r\n    function maxTransferInput(){\r\n        if (direction == \"1\") {\r\n            let chainIndex = chains.findIndex(item => item.id === bridges[bridge].chainSource);\r\n            setAmount(usersBalances[chainIndex][`${chains[chainIndex].name}`]);\r\n        } else {\r\n            let chainIndex = chains.findIndex(item => item.id === bridges[bridge].chainTarget);\r\n            setAmount(usersBalances[chainIndex][`${chains[chainIndex].name}`]);\r\n        }  \r\n    }\r\n\r\n    const countDecimals = (value) => {\r\n        if(Math.floor(value).toString() === value) return 0;\r\n        return value.toString().split(\".\")[1].length || 0;\r\n    };\r\n\r\n    const getChainsNamesFromBridgeObject = (index) => {\r\n        let chainsArr = chains;\r\n        let bridgeChains = chainsArr.filter(item => item.id === bridges[index].chainSource || item.id === bridges[index].chainTarget);\r\n        let names = bridgeChains.map(item => item.name);\r\n        return names;\r\n    };\r\n\r\n    //TODO: Popravi da bo alert prikazan s tisim oblačkom spodaj, ko ga lahko skenslaš z x-om\r\n    const confirmTransfer = async () => {\r\n        try {\r\n            setLoading(true);\r\n            if ((amount === null || amount === \"\" || amount === 0 || isNaN(amount))) {\r\n                setNote((prevState) => {\r\n                    return({\r\n                      ...prevState,\r\n                      msg: 'You must enter positive numbers',\r\n                      heading: 'Transfer failed!',\r\n                      show: true,\r\n                      type: 'danger'\r\n                    });\r\n                  });\r\n                setLoading(false);\r\n            } else {\r\n                if ((Math.sign(amount)) == -1) {\r\n                    setNote((prevState) => {\r\n                        return({\r\n                          ...prevState,\r\n                          msg: 'Amount cannot be a negative number',\r\n                          heading: 'Transfer failed!',\r\n                          show: true,\r\n                          type: 'danger'\r\n                        });\r\n                      });\r\n                    setLoading(false);\r\n                } else {\r\n                    if (countDecimals(amount) > 0 )  {\r\n                        setNote((prevState) => {\r\n                            return({\r\n                              ...prevState,\r\n                              msg: 'Input value must be an integer',\r\n                              heading: 'Transfer failed!',\r\n                              show: true,\r\n                              type: 'danger'\r\n                            });\r\n                          });\r\n                        setLoading(false);\r\n                    } else {\r\n                        if (parseInt(amount)  > parseInt(usersBalances[activeChain][`${chains[activeChain].name}`])) {\r\n                            setNote((prevState) => {\r\n                                return({\r\n                                  ...prevState,\r\n                                  msg: 'Amount is bigger than balance',\r\n                                  heading: 'Transfer failed!',\r\n                                  show: true,\r\n                                  type: 'danger'\r\n                                });\r\n                              });\r\n                            setLoading(false);\r\n                        } else {\r\n                            \r\n                            \r\n                            if(direction == false) await apiUserBridge(amount, fee, chains[0].id, chains[bridge].id);\r\n                            else await apiUserBridge(amount, fee, chains[bridge].id, chains[0].id,);  \r\n\r\n                            setLoading(false);\r\n                            setAmount(0);\r\n\r\n                            setNote((prevState) => {\r\n                                return({\r\n                                  ...prevState,\r\n                                  msg: 'You successfully transferred ' + amount ,\r\n                                  show: true,\r\n                                  type: 'success'\r\n                                });\r\n                              });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setNote({\r\n                show: true,\r\n                type: \"danger\",\r\n                msg: e.response.data.message,\r\n                heading: \"Transfer failed! \"\r\n        })\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(chains[activeChain].name);\r\n        console.log(usersBalances);\r\n        console.log(usersBalances.indexOf(chains[activeChain].name));\r\n\r\n    }, [chains]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className='d-flex' style={{paddingTop: \"10%\", justifyContent: \"center\"}}>\r\n            <Card style={{backgroundColor: \"transparent\", borderRadius: \"8px\", boxShadow: \"var(--light-shadow)\"}}>\r\n            { chains.length > 1 ? (\r\n                <Card.Body>\r\n                <Card.Title> \r\n                <b>{bridges[bridge].name}</b>\r\n                <Dropdown style={{margin: \"10px\"}}>\r\n\r\n                    <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\" style={{borderRadius: \"8px\"}}>\r\n                        <b> <span style={{color: (direction === \"1\" ? `red` : `green`)}}> {getChainsNamesFromBridgeObject(bridge)[0]} </span> {direction === \"1\" ? `➡` : `⬅`} <span style={{color: (direction === \"2\" ? `red` : `green`)}}>  {getChainsNamesFromBridgeObject(bridge)[1]}  </span>  </b> \r\n                    </Dropdown.Toggle>\r\n                    \r\n                    <Dropdown.Menu>\r\n                    {\r\n                        bridges.map((item, index) => (\r\n                            <Dropdown.Item onClick={(item) => (setBridge(index))} > {getChainsNamesFromBridgeObject(index)[0]}  {getChainsNamesFromBridgeObject(index)[1]} </Dropdown.Item>\r\n                        ))\r\n                    }\r\n                    </Dropdown.Menu>\r\n                            \r\n                </Dropdown>\r\n                </Card.Title>\r\n\r\n                \r\n\r\n                        <Card className='d-flex' style={{backgroundColor: \"rgba(222, 243, 239, 0.5)\", borderRadius: \"8px\", margin: \"10px\"}}>\r\n                    \r\n                        <Card.Body>\r\n\r\n                        <ButtonGroup>\r\n                            {directions.map((dir, idx) => (\r\n                            <ToggleButton\r\n                                key={idx}\r\n                                id={`dir-${idx}`}\r\n                                type=\"radio\"\r\n                                variant={'outline-primary'}\r\n                                name=\"dir\"\r\n                                value={dir.value}\r\n                                checked={direction === dir.value}\r\n                                onChange={(e) => setDirection(e.currentTarget.value)}\r\n                                style={{width: \"10em\", borderRadius: (idx % 2 ? \"0px 8px 8px 0px\" : \"8px 0px 0px 8px\")}}\r\n                            >\r\n                                {dir.name}\r\n                            </ToggleButton>\r\n                            ))}\r\n                        </ButtonGroup>\r\n                                \r\n\r\n                            \r\n                            <Card.Text>\r\n\r\n                            <InputGroup style={{margin: \"10px\", borderRadius: \"8px\"}}>\r\n                                <InputGroup.Text id=\"input-user-name\" style={{borderRadius: \"8px 0 0 8px\"}}>Amount</InputGroup.Text>\r\n                                <FormControl value ={amount} onChange={e => setAmount(e.target.value)}></FormControl>\r\n                                <Button variant=\"outline-info\" onClick={() =>  maxTransferInput(direction)} style={{borderRadius: \"0 8px 8px 0\"}} > Max </Button>\r\n                            </InputGroup>\r\n\r\n                            <InputGroup style={{margin: \"10px\"}}>\r\n                                <InputGroup.Text id=\"input-user-name\" style={{borderRadius: \"8px 0 0 8px\"}}>Fee</InputGroup.Text>\r\n                                <FormControl value ={fee} onChange={e => setFee(e.target.value)} style={{borderRadius: \"0 8px 8px 0\"}}></FormControl>\r\n                            </InputGroup>\r\n                            \r\n                            \r\n                            </Card.Text>\r\n                           \r\n                        </Card.Body>\r\n                \r\n                </Card>\r\n                \r\n                <Button variant=\"success\"  onClick={() => confirmTransfer()} style={{borderRadius: \"8px\"}}>\r\n\r\n                {loading ? (\r\n                    <div>\r\n                        <Spinner\r\n                        as=\"span\"\r\n                        animation=\"grow\"\r\n                        size=\"sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                    />\r\n\r\n                        <text> Transfering </text>\r\n\r\n                    </div>\r\n                   \r\n\r\n                ) : (\r\n                    <text> Transfer  </text>\r\n                )\r\n                \r\n                } \r\n                </Button>\r\n\r\n            </Card.Body>\r\n\r\n            ): (\r\n                <Card.Body>\r\n                    <Card.Title> Only main chain exists </Card.Title>\r\n\r\n                    <Card.Text> Please create a bridge to use this function</Card.Text>\r\n\r\n                </Card.Body>\r\n\r\n            )\r\n\r\n            }\r\n            </Card>\r\n            \r\n            \r\n        </div>\r\n            \r\n        </>\r\n    )\r\n};\r\n\r\nexport default BridgeCard"],"names":["ButtonGroup","React","ref","bsPrefix","size","vertical","className","as","Component","rest","prefix","useBootstrapPrefix","baseClass","_jsx","classNames","displayName","defaultProps","role","noop","ToggleButton","name","checked","type","onChange","value","disabled","id","inputRef","props","_jsxs","_Fragment","children","autoComplete","Button","undefined","htmlFor","useGlobalContext","chains","apiUserBridge","cookies","activeChain","user","usersBalances","bridges","setNote","useState","amount","setAmount","fee","setFee","bridge","setBridge","loading","setLoading","direction","setDirection","getChainsNamesFromBridgeObject","index","filter","item","chainSource","chainTarget","map","confirmTransfer","isNaN","prevState","msg","heading","show","Math","sign","floor","toString","split","length","parseInt","response","data","message","useEffect","console","log","indexOf","style","paddingTop","justifyContent","Card","backgroundColor","borderRadius","boxShadow","Dropdown","margin","variant","color","onClick","dir","idx","e","currentTarget","width","InputGroup","FormControl","target","chainIndex","findIndex","maxTransferInput","Spinner","animation"],"sourceRoot":""}