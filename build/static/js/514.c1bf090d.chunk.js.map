{"version":3,"file":"static/js/514.c1bf090d.chunk.js","mappings":"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","sources":["components/misc/ChainPanel/ChainMesh.js","components/misc/ChainPanel/ChainData.js","components/misc/ChainPanel/CreateChain.js","components/panels/PanelChains.js"],"sourcesContent":["import React, { useRef, useEffect, useContext } from 'react';\r\nimport { AppContext } from '../../../context/context';\r\nimport { Network } from \"vis-network\";\r\nimport { DataSet } from 'vis-data'\r\nimport 'vis/dist/vis-network.min.css';\r\n\r\n\r\n//TODO: Naredi te node clickable\r\nconst ChainMesh = () => {\r\n  const { chains, cookies, bridges } = useContext(AppContext);\r\n\r\n  \r\n\r\n\tconst visJsRef = useRef(null);\r\n\r\n  function colorNodeOnRefresh(nodes, chain){\r\n    nodes.update(chain);\r\n  }\r\n\r\n\r\n  //TODO: na Page refresh se obarva trenutni chain\r\n  useEffect(() => {\r\n    \r\n\r\n    let nodes =  new DataSet (chains.map((item, index) => {\r\n      let currentChain = parseInt(cookies.activeChain);\r\n      return { id: item.id, label:item.name, color: {background: `${index == currentChain ? '#FBBF0C' : '#7DCDF5'}`}, title: `Stake: ${item.stake}, Balance: ${item.balance}`};\r\n    }));\r\n\r\n\r\n    let edges =  new DataSet (bridges.map(item => {\r\n      return { from: item.chainSource, to:item.chainTarget, title: `🔁Bridge: ${item.name}`};\r\n    }));\r\n\r\n\r\n    const setNodeNetwork = async () => {\r\n      const network = await\r\n\t\t\tvisJsRef.current &&\r\n\t\t\tnew Network(\r\n\t\t\t\tvisJsRef.current,\r\n\t\t\t\t{ nodes, edges},\r\n\t\t\t\t{\r\n\t\t\t\t\tautoResize: true,\r\n          interaction:{hover:true},\r\n          edges: {\r\n            color: \"#411811\",\r\n            width: 2,\r\n            arrows: \"both\"\r\n          },\r\n          nodes: {\r\n            shape: 'dot' //box, database, square, circle, ellipse...\r\n        },\r\n          \r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n      //TODO: Popravi da dela spet to šaltanje\r\n      // network.on(\"doubleClick\", function (params) {\r\n      //   if (params.nodes.length === 1) {\r\n      //     // console.log(params.nodes[0])\r\n      //     // console.log(localStorage.getItem(\"activeChain\")+1);\r\n          \r\n      //     var previousNode = nodes.get(parseInt(cookies.activeChain));\r\n      //     console.log(previousNode);\r\n      //     // console.log(previousNode)\r\n      //     previousNode.color = {\r\n      //       background: '#7DCDF5',\r\n      //     }\r\n      //     nodes.update(previousNode);\r\n\r\n      //     var nodeID = params.nodes[0];\r\n          \r\n      //     var clickedNode = nodes.get(nodeID);\r\n      //     clickedNode.color = {\r\n      //       background: '#FBBF0C',\r\n      //     }\r\n          \r\n      //     nodes.update(clickedNode);\r\n      //     updateActiveChain(nodeID);\r\n      //     setCookie(\"activeChain\",nodeID)\r\n\r\n      //     apiUserFetch(cookies.userId, activeChain)\r\n      //           .then(user => {\r\n      //               console.log(\"User\" + user)\r\n      //               setUser({\r\n      //                   id: user.id,\r\n      //                   type: user.type,\r\n      //                   state: user.state,\r\n      //                   balance: user.balance,\r\n      //                   stake: user.stake,\r\n      //                   // typeOfService: user.typeOfService,\r\n\r\n      //               })\r\n      //           }).catch(e => console.log(e))\r\n  \r\n      //    }\r\n      // });\r\n\r\n      network.on(\"hoverNode\", function (params) {\r\n        network.canvas.body.container.style.cursor = 'grab';\r\n      });\r\n\r\n\r\n      network.on(\"blurNode\", function (params) {\r\n        network.canvas.body.container.style.cursor = 'default';\r\n      }); \r\n      \r\n      network.on(\"blurEdge\", function (params) {\r\n        network.canvas.body.container.style.cursor = 'default';\r\n      });   \r\n\r\n\r\n      \r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  setNodeNetwork();\r\n\t\r\n\t}, [chains.length, cookies.activeChain]);\r\n\r\n\treturn <div className=\"chain-network\" ref={visJsRef} />;\r\n};\r\n\r\nexport default ChainMesh","import React, {useState, useEffect, useContext} from 'react';\r\nimport {AppContext} from \"../../../context/context\";\r\n\r\nconst ChainData = () => {\r\n    const { chains, cookies, setCookie, setUser, apiUserFetch, updateActiveChain, user, setUsersBalances, userBalances, apiUserFetchBalance, game} = useContext(AppContext);\r\n\r\n\r\n    async function changeChain(chainId){\r\n        setCookie(\"activeChain\", chainId);\r\n        updateActiveChain(chainId);\r\n        console.log(chains[chainId]);\r\n        console.log(\"ACtive chain:\" + chains[chainId].id);\r\n        \r\n        // await apiUserFetch(chains[chainId].id)\r\n        //         .then(user => {\r\n        //             console.log(\"User\" + JSON.stringify(user))\r\n        //             setUser({...context.user, balance: balance[0]});\r\n        //         }).catch(e => console.log(e))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-space-evenly flex-column\" style={{boxShadow: \"var(--light-shadow)\", borderRadius: \"8px\", width:\"100%\", margin: \"5x\"}}>\r\n                <div>\r\n                    <h2>Chains</h2>\r\n                    <div style={{height: \"auto\", overflow: \"auto\"}}>\r\n                        <table className=\"table-all-rankings\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Chain ID</th>\r\n                                <th>Chain Name</th>\r\n                                <th>Block no.</th>\r\n                                <th>Balance</th>\r\n                                <th>Staked</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {\r\n                                chains.map((item, index) => (\r\n                                    <tr\r\n                                        key={item._id} //TODO: Naredi da se gleda trenutni chain {}\r\n                                        style={{background: `${item.name === chains[cookies.activeChain].name ? '#FBBF0C' : ''}`, cursor:\"pointer\"}}\r\n                                        // onClick={changeChain(index)}\r\n                                        onClick={(item) => (changeChain(index))} \r\n                                    >\r\n                                        <td><strong>{index + 1}</strong></td>\r\n                                        <td>{item.name}</td>\r\n                                        <td>{item.blockNumber}</td>\r\n                                        <td>{item.balance}</td>\r\n                                        <td>{item.stake}</td>\r\n                                        {/* <td>{item.transactions.length()}</td> */}\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ChainData","import React, {useState, useEffect, useContext} from 'react';\r\nimport { AppContext } from '../../../context/context';\r\nimport {Button, Spinner, Card, Dropdown, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport {motion} from 'framer-motion'\r\nconst CreateSideChain = () => {\r\n    const context = useContext(AppContext);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [openModal, setModal] = useState(false);\r\n    const [chain, setChain] = useState(0);\r\n    const [fee, setFee] = useState(0);\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    let openCreateCard  = async () => {\r\n        setModal(true);\r\n    }\r\n\r\n\r\n    let createChain = async () => {\r\n        try {\r\n            setLoading(true);\r\n            console.log(\"Chain to create from:\")\r\n            console.log(context.chains[chain].name)\r\n            console.log(context.chains[chain].id)\r\n            let response = await context.apiUserCreateChain(context.chains[chain].id, fee);\r\n            console.log(response);\r\n            context.apiUserFetchBalance(context.game.id).then(balance => {\r\n                console.log(JSON.stringify(balance));\r\n                context.setUsersBalances(balance);\r\n            }).catch(e => console.log(e));\r\n\r\n            context.apiUserFetchStake(context.game.id).then(stakes => {\r\n                console.log(\"STAKES: \" + stakes)\r\n                if(stakes[0] != undefined) context.setUsersStakes(stakes[0]);\r\n            }).catch(e => console.log(e));\r\n\r\n\r\n            context.setNote({\r\n                show: true,\r\n                type: \"success\",\r\n                msg:  response.message,\r\n                heading: \"Success! \"\r\n            })\r\n            setLoading(false);\r\n            setModal(false);\r\n        } catch (e) {\r\n            setLoading(false);\r\n            context.setNote({\r\n                show: true,\r\n                type: \"danger\",\r\n                msg: e.response.data.message,\r\n                heading: \"Chain not created! \"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        \r\n\r\n            <div style={{textAlign: \"center\", padding: \"4px\", zIndex: 1}}>\r\n\r\n                {openModal ? (\r\n                    <motion.div \r\n                        // className=\"box\"\r\n                            initial={{ opacity: 0, scale: 0.5 }}\r\n                            animate={{ opacity: 1, scale: 1 }}\r\n                            transition={{\r\n                                duration: 0.2,\r\n                                type: \"spring\",\r\n                                bounce: 0.5,\r\n                                ease: [0, 0.71, 0.2, 1.01]\r\n                            }}>\r\n\r\n                        <Card style={{width: \"100%\", height: \"100%\", backgroundColor: \"white\", zIndex: 1, borderRadius: \"8px\", boxShadow: \"var(--light-shadow)\"}}>\r\n                            <Card.Body>\r\n                                <Card.Title> Create a new chain </Card.Title>\r\n                                <Card.Text>\r\n                                    <p> You are about to create a new sidechain of </p>\r\n                                    <Dropdown style={{margin: \"10px\"}}>\r\n                                    <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\" >\r\n                                        <b> <span style={{color: 'green'}}> {context.chains[chain].name} </span>  </b> \r\n                                    </Dropdown.Toggle>\r\n                                        <Dropdown.Menu>\r\n                                        {\r\n                                            context.chains.map((item, index) => (\r\n                                                <Dropdown.Item onClick={(item) => (setChain(index))} > {item.name} </Dropdown.Item>\r\n                                            ))\r\n                                        }\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                    <InputGroup style={{paddingLeft: \"1rem\", paddingRight: \"1rem\", paddingBottom: \"1rem\"}}>\r\n                                        <InputGroup.Text id=\"input-user-name\">Fee</InputGroup.Text>\r\n                                        <FormControl value ={fee} onChange={e => setFee(e.target.value)}></FormControl>\r\n                                    </InputGroup>\r\n                                    {/* <InputGroup style={{paddingLeft: \"1rem\", paddingRight: \"1rem\"}}>\r\n                                        <InputGroup.Text id=\"input-user-name\">Amount</InputGroup.Text>\r\n                                        <FormControl value ={amount} onChange={e => setAmount(e.target.value)}></FormControl>\r\n                                    </InputGroup> */}\r\n                                    <p> Are you sure you want to continue? </p>\r\n                                </Card.Text>\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <Button variant=\"success\" onClick={createChain}  style={{margin: \"5px\"}} >\r\n                                    \r\n                                    {loading ? (\r\n                                        <div>\r\n                                            <Spinner\r\n                                            as=\"span\"\r\n                                            animation=\"grow\"\r\n                                            size=\"sm\"\r\n                                            role=\"status\"\r\n                                            aria-hidden=\"true\"\r\n                                        />\r\n                                        <text> Creating </text>\r\n                                        </div>\r\n                                    ) : ( <text> Create  </text>)\r\n                                    \r\n                                    }   \r\n                                    </Button>\r\n\r\n                                    <Button variant=\"danger\"  onClick={() =>  setModal(false)} style={{margin: \"5px\"}}>\r\n                                        <text> Cancel  </text>\r\n                                    </Button>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n\r\n\r\n                    </motion.div>\r\n                ):(\r\n                    <Button variant=\"success\"  onClick={() =>  setModal(true)} style={{borderRadius: \"8px\", boxShadow: \"var(--light-shadow)\"}}>\r\n                        <text> Create a new chain  </text>\r\n                    </Button>\r\n                )\r\n                }\r\n            \r\n                \r\n                \r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CreateSideChain","import React, {useState, useEffect} from 'react';\r\nimport ChainMesh from '../misc/ChainPanel/ChainMesh';\r\nimport ChainData from '../misc/ChainPanel/ChainData';\r\nimport CreateSideChain from '../misc/ChainPanel/CreateChain';\r\n\r\n\r\nconst PanelChains = () => {\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className=\"d-flex flex-column\" style={{width: \"100%\"}}>\r\n             {/* Naredi tako, da je ta chain mesh večji od ta druge kartice */}\r\n             {/* boxShadow: \"var(--light-shadow)\" */}\r\n                <div className=\"d-flex flex-column\" style={{zIndex: 2, position: \"absolute\", borderRadius: \"8px\", margin: \"15px\", textAlign: \"center\", alignSelf: \"end\"}}> \r\n                    <CreateSideChain />\r\n                </div> \r\n                <div className=\"d-flex\" style={{zIndex: 1}}>\r\n                    <ChainMesh />\r\n                </div>\r\n                <div className=\"sidechain-info-container\">\r\n                    <ChainData />\r\n                </div>                        \r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PanelChains"],"names":["useContext","AppContext","chains","cookies","bridges","visJsRef","useRef","useEffect","nodes","DataSet","map","item","index","currentChain","parseInt","activeChain","id","label","name","color","background","title","stake","balance","edges","from","chainSource","to","chainTarget","setNodeNetwork","current","Network","autoResize","interaction","hover","width","arrows","shape","network","on","params","canvas","body","container","style","cursor","length","className","ref","setCookie","updateActiveChain","setUser","apiUserFetch","user","setUsersBalances","userBalances","apiUserFetchBalance","game","chainId","console","log","boxShadow","borderRadius","margin","height","overflow","onClick","changeChain","blockNumber","_id","context","useState","loading","setLoading","openModal","setModal","chain","setChain","fee","setFee","createChain","apiUserCreateChain","response","then","JSON","stringify","catch","e","apiUserFetchStake","stakes","undefined","setUsersStakes","setNote","show","type","msg","message","heading","data","textAlign","padding","zIndex","motion","initial","opacity","scale","animate","transition","duration","bounce","ease","Card","backgroundColor","Dropdown","variant","InputGroup","paddingLeft","paddingRight","paddingBottom","FormControl","value","onChange","target","Button","Spinner","as","animation","size","role","position","alignSelf"],"sourceRoot":""}