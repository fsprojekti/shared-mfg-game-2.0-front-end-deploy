{"version":3,"file":"static/js/348.6a1078fe.chunk.js","mappings":"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","sources":["components/misc/BlockchainPanel/PieChart.js","components/misc/BlockchainPanel/MiningBar.js","components/misc/BlockchainPanel/TransactionTable.js","components/misc/BlockchainPanel/TransactionTableAll.js","components/misc/BlockchainPanel/BlockchainData.js"],"sourcesContent":["import {React, useContext} from \"react\";\r\nimport { AppContext } from \"../../../context/context\";\r\nimport { ResponsivePie } from '@nivo/pie'\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\n\r\nconst CenteredMetric = ({ centerX, centerY }) => {\r\n    const { chains, cookies } = useContext(AppContext);\r\n    \r\n    let chainId = cookies.activeChain;\r\n    let total = chains[chainId].totalStake;\r\n    return (\r\n        <text\r\n            x={centerX}\r\n            y={centerY}\r\n            textAnchor=\"middle\"\r\n            dominantBaseline=\"central\"\r\n            style={{\r\n                fontSize: '25px',\r\n                fontWeight: '500',\r\n            }}\r\n        >\r\n            {total}\r\n        </text>\r\n    )\r\n};\r\n\r\n// const PieChart = ({ data }) => (\r\n//     <ResponsivePie\r\n//         data={data}\r\n//         theme={{ \"fontSize\": 16, fontFamily: \"Roboto, sans-serif\", axis: { legend: { text: { fontSize: \"16px\", fontWeight: \"bold\", fontFamily: \"Roboto, sans-serif\" } } } }}\r\n//         margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\r\n//         innerRadius={0.3}\r\n//         padAngle={1}\r\n//         cornerRadius={3}\r\n//         // colors={{ scheme: 'yellow_orange_red' }}\r\n//         borderWidth={1}\r\n//         borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\r\n//         enableRadialLabels={false}\r\n//         sliceLabelsSkipAngle={10}\r\n//         sliceLabelsTextColor=\"#333333\"\r\n//         sortByValue={true}\r\n//         layers={['slices', 'sliceLabels', CenteredMetric]}\r\n//     />\r\n// );\r\n\r\n\r\n\r\n\r\nconst PieChart = ({ data}) => {\r\n    const context = useContext(AppContext);\r\n\r\n    return (\r\n    \r\n\r\n\r\n    <ResponsivePie \r\n        data={data}\r\n        margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n\r\n\r\n        innerRadius={0.5}\r\n        padAngle={0.7}\r\n        cornerRadius={3}\r\n        activeOuterRadiusOffset={8}\r\n        borderWidth={1}\r\n        borderColor={{\r\n            from: 'color',\r\n            modifiers: [\r\n                [\r\n                    'darker',\r\n                    0.2\r\n                ]\r\n            ]\r\n        }}\r\n        arcLinkLabelsSkipAngle={10}\r\n        arcLinkLabelsTextColor=\"#333333\"\r\n        arcLinkLabelsThickness={2}\r\n        arcLinkLabelsColor={{ from: 'color' }}\r\n        arcLabelsSkipAngle={10}\r\n        arcLabelsTextColor={{\r\n            from: 'color',\r\n            modifiers: [\r\n                [\r\n                    'darker',\r\n                    2\r\n                ]\r\n            ]\r\n        }}\r\n        defs={[\r\n            {\r\n                id: 'dots',\r\n                type: 'patternDots',\r\n                background: 'inherit',\r\n                color: 'rgba(255, 255, 255, 0.3)',\r\n                size: 4,\r\n                padding: 1,\r\n                stagger: true\r\n            },\r\n            {\r\n                id: 'lines',\r\n                type: 'patternLines',\r\n                background: 'inherit',\r\n                color: 'rgba(255, 255, 255, 0.3)',\r\n                rotation: -45,\r\n                lineWidth: 6,\r\n                spacing: 10\r\n            }\r\n        ]}\r\n        fill={[\r\n            {\r\n                match: {\r\n                    id: context.user.name\r\n                },\r\n                id: 'dots'\r\n            }\r\n        ]}\r\n        // legends={[\r\n        //     {\r\n        //         anchor: 'bottom',\r\n        //         direction: 'row',\r\n        //         justify: false,\r\n        //         translateX: 0,\r\n        //         translateY: 56,\r\n        //         itemsSpacing: 0,\r\n        //         itemWidth: 100,\r\n        //         itemHeight: 18,\r\n        //         itemTextColor: '#999',\r\n        //         itemDirection: 'left-to-right',\r\n        //         itemOpacity: 1,\r\n        //         symbolSize: 18,\r\n        //         symbolShape: 'circle',\r\n        //         effects: [\r\n        //             {\r\n        //                 on: 'hover',\r\n        //                 style: {\r\n        //                     itemTextColor: '#000'\r\n        //                 }\r\n        //             }\r\n        //         ]\r\n        //     }\r\n        // ]}\r\n    /> \r\n    )\r\n}\r\n\r\nexport default PieChart","import React, {useState, useEffect, useRef} from 'react';\r\nimport { useGlobalContext } from '../../../context/context';\r\n\r\nconst MiningBar = () => {\r\n    const { chainMain } = useGlobalContext();\r\n    const [timeLeft, setTimeLeft] = useState('');\r\n    const [width, setWidth] = useState(0);\r\n\r\n    function useInterval(callback, delay) {\r\n        const savedCallback = useRef();\r\n\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    function millisToMinutesAndSeconds(millis) {\r\n        let d = new Date(1000*Math.round(millis/1000));\r\n        if (d.getUTCMinutes() === 0) {\r\n            return ( d.getUTCSeconds() + 's' );\r\n        } else {\r\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\r\n        }\r\n    }\r\n\r\n    useInterval(async () => {\r\n        const createdMillis = await new Date(chainMain.miningTime).getTime();\r\n        let timeLeft = 10000 - (Date.now() - createdMillis);\r\n        let width = await Math.floor((1 - ((Date.now() - createdMillis) / 10000)) * 100);\r\n        if (width < 0 || timeLeft < 0) {\r\n            width = 0;\r\n            timeLeft = 0;\r\n        }\r\n        setTimeLeft(millisToMinutesAndSeconds(timeLeft));\r\n        setWidth(width);\r\n    }, 50);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mining-progress-container\">\r\n                <div className=\"mining-progress-flex\">\r\n                    <p>Mining</p>\r\n                    <div className=\"mining-progress\">\r\n                        <div className=\"mining-progress-filler\" style={{width: `${width}%`}}></div>\r\n                    </div>\r\n                </div>\r\n                <span className=\"mining-progress-text\">Time left: {timeLeft}</span>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default MiningBar","import React, {useState, useEffect, useContext} from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { AppContext } from '../../../context/context';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport MiningBar from './MiningBar';\r\n\r\n\r\nconst TransactionsTable = () => {\r\n    const { game, user, users, agents,  chainMain, openConfirmModal, setConfirmModalContent, transactions, chains, activeChain} = useContext(AppContext);\r\n    const [tableDataArray, setTableDataArray] = useState([]);\r\n    const [timeLeft, setTimeLeft] = useState('');\r\n    const [width, setWidth] = useState(0);\r\n\r\n    function millisToMinutesAndSeconds(millis) {\r\n        let d = new Date(1000*Math.round(millis/1000));\r\n        if (d.getUTCMinutes() === 0) {\r\n            return ( d.getUTCSeconds() + 's' );\r\n        } else {\r\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\r\n        }\r\n    }\r\n\r\n    const setCancelTransactionModal = (transaction) => {\r\n        setConfirmModalContent(transaction);\r\n        openConfirmModal();\r\n    };\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n        const renderTableData = async () => {\r\n            console.log(transactions[chains[activeChain].name]);\r\n            const orderTransactions = await transactions[chains[activeChain].name].filter(transaction => transaction.state == \"SEND\");\r\n            console.log(orderTransactions);\r\n            const transactionsByFee = await orderTransactions.sort((a, b) => parseInt(b.fee) - parseInt(a.fee));\r\n            console.log(transactionsByFee);\r\n            const transactionsArray = await Promise.all(transactionsByFee.map(async (transaction) => {\r\n                let { from, to, fee, amount} = transaction;\r\n                console.log(from)\r\n                console.log(to)\r\n                const consumerAgent = await agents.filter(agent => agent.account === from);\r\n\r\n                const consumerUser = await users[\"users\"].filter(user => user._id === consumerAgent[0].user);\r\n                \r\n                const providerAgent = await agents.filter(agent => agent.account === orderTransactions[0].to);\r\n                console.log(providerAgent.length == 0);\r\n                if(providerAgent.length == 0) {\r\n                    return (\r\n                        {\r\n                            id: transaction._id,\r\n                            consumer: consumerUser[0].name,\r\n                            provider:  \"Blockchain\",\r\n                            price: amount,\r\n                            fee: fee,\r\n                        }\r\n                    )\r\n                }\r\n\r\n\r\n                const providerUser = await users[\"users\"].filter(user => user._id === providerAgent[0].user);\r\n\r\n                if(providerUser[0].name != undefined) {\r\n                    return (\r\n                        {\r\n                            id: transaction._id,\r\n                            consumer: consumerUser[0].name,\r\n                            provider: providerUser[0].name,\r\n                            price: amount,\r\n                            fee: fee,\r\n                        }\r\n                    )\r\n                }\r\n                \r\n            }));\r\n            setTableDataArray(transactionsArray);\r\n        };\r\n        renderTableData();\r\n        const calculateTimeLeft = async () => {\r\n            const createdMillis = await new Date(chainMain.miningTime).getTime();\r\n            let timeLeft = 10000 - (Date.now() - createdMillis);\r\n            let width = await Math.floor((1 - ((Date.now() - createdMillis) / 10000)) * 100);\r\n            if (width < 0 || timeLeft < 0) {\r\n                width = 0;\r\n                timeLeft = 0;\r\n            }\r\n            setTimeLeft(millisToMinutesAndSeconds(timeLeft));\r\n            setWidth(width);\r\n        };\r\n        calculateTimeLeft();\r\n    }, [game]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"pending-transactions-container\">\r\n                <MiningBar/>\r\n                <div className=\"table-pending-transactions-container\">\r\n                    <table className=\"table-pending-transactions\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th className=\"table-pending-transactions-head\">No.</th>\r\n                            <th className=\"table-pending-transactions-head\">Pending transactions on {chains[activeChain].name} chain</th>\r\n                            <th className=\"table-pending-transactions-head\">Tx Fee</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            tableDataArray.map((item, index) => (\r\n                                <tr\r\n                                    key={item.id}\r\n                                    data-tip data-for={item.id}\r\n                                    style={{background: `${(item.consumer === user.playerName) || (item.provider === user.playerName) ? '#fffd6c' : ''}`}}\r\n                                >\r\n                                    <td><strong>{index + 1}</strong></td>\r\n                                    <td>\r\n                                        {item.consumer} &#8646; {item.provider}\r\n                                        {item.consumer === user.playerName ?\r\n                                            <button\r\n                                                className='cancel-transaction-btn'\r\n                                                onClick={() => { ((item.consumer === user.playerName) || (item.provider === user.playerName)) && setCancelTransactionModal(item)}}\r\n                                            >\r\n                                                <FaTimes></FaTimes>\r\n                                            </button>\r\n                                            :''}\r\n                                    </td>\r\n                                    <td>{item.fee}</td>\r\n                                    <td className=\"table-pending-transactions-tooltip\">\r\n                                        <ReactTooltip id={item.id} place=\"bottom\" type=\"dark\" effect=\"solid\">\r\n                                            <ul>\r\n                                                <li>Consumer: {item.consumer}</li>\r\n                                                <li>Provider: {item.provider}</li>\r\n                                                <li>typeOfService: {item.typeOfService}</li>\r\n                                                <li>price: {item.price}</li>\r\n                                            </ul>\r\n                                        </ReactTooltip>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TransactionsTable","import React, {useState, useEffect, useContext} from 'react';\r\nimport { AppContext } from '../../../context/context';\r\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\r\n\r\nconst AllTransactionsTable = () => {\r\n    const { game, user, users, agents,  chainMain, openConfirmModal, setConfirmModalContent, transactions, chains, activeChain} = useContext(AppContext);\r\n    const [tableDataArray, setTableDataArray] = useState([]);\r\n    const [sortBy, setSortBy] = useState('time');\r\n    const [orderOfSort, setOrderOfSort] = useState('ascending');\r\n    const [checkBoxes, setCheckBoxes] = useState([{type: \"Mechanical service\", isChecked: false}, {type: \"Electrical service\", isChecked: false}, {type: \"IT service\", isChecked: false}, {type: \"Stake\", isChecked: false}, {type: \"Unstake\", isChecked: false}]);\r\n\r\n    const displayTime = async (time) => {\r\n        const createdMillis = await new Date(time);\r\n        return createdMillis.toLocaleTimeString('it-IT');\r\n    };\r\n\r\n    const sortDataArray = async (dataArray) => {\r\n        if (sortBy === 'time') {\r\n            return await dataArray.sort((a, b) => {\r\n                let arrayA = a.createdAt.split(\":\");\r\n                let timeA = (parseInt(arrayA[0], 10) * 60 * 60) + (parseInt(arrayA[1], 10) * 60) + parseInt(arrayA[2], 10);\r\n                let arrayB = b.createdAt.split(\":\");\r\n                let timeB = (parseInt(arrayB[0], 10) * 60 * 60) + (parseInt(arrayB[1], 10) * 60) + parseInt(arrayB[2], 10);\r\n                if (orderOfSort === \"descending\") {\r\n                    return timeB - timeA;\r\n                } if (orderOfSort === \"ascending\") {\r\n                    return timeA - timeB;\r\n                }\r\n            });\r\n        } if (sortBy === 'consumer') {\r\n            return await dataArray.sort((a, b) => {\r\n                let textA = a.consumer.toUpperCase();\r\n                let textB = b.consumer.toUpperCase();\r\n                if (orderOfSort === \"descending\") {\r\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n                } if (orderOfSort === \"ascending\") {\r\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\r\n                }\r\n            });\r\n        } if (sortBy === 'provider') {\r\n            return await dataArray.sort((a, b) => {\r\n                let textA = a.provider.toUpperCase();\r\n                let textB = b.provider.toUpperCase();\r\n                if (orderOfSort === \"descending\") {\r\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n                } if (orderOfSort === \"ascending\") {\r\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\r\n                }\r\n            });\r\n        } if (sortBy === 'typeOfService') {\r\n            return await dataArray.sort((a, b) => {\r\n                let textA = a.typeOfService.toUpperCase();\r\n                let textB = b.typeOfService.toUpperCase();\r\n                if (orderOfSort === \"descending\") {\r\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n                } if (orderOfSort === \"ascending\") {\r\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\r\n                }\r\n            });\r\n        } if (sortBy === 'price') {\r\n            if (orderOfSort === \"descending\") {\r\n                return await dataArray.sort((a, b) => parseInt(b.price) - parseInt(a.price));\r\n            } if (orderOfSort === \"ascending\") {\r\n                return await dataArray.sort((a, b) => parseInt(a.price) - parseInt(b.price));\r\n            }\r\n        } if (sortBy === 'txFee') {\r\n            if (orderOfSort === \"descending\") {\r\n                return await dataArray.sort((a, b) => parseInt(b.txFee) - parseInt(a.txFee));\r\n            } if (orderOfSort === \"ascending\") {\r\n                return await dataArray.sort((a, b) => parseInt(a.txFee) - parseInt(b.txFee));\r\n            }\r\n        }\r\n    };\r\n\r\n    const selectOne = async (e) => {\r\n        let itemName = e.target.name;\r\n        let checked = e.target.checked;\r\n        const newArray = await checkBoxes.map(item =>\r\n            item.type === itemName ? { ...item, isChecked: checked } : item\r\n        );\r\n        setCheckBoxes(newArray);\r\n    };\r\n\r\n    const filterDataArray = async (dataArray) => {\r\n        const checkedBoxes = await checkBoxes.filter(item => item.isChecked);\r\n        const selectedTypes = await checkedBoxes.map(item => item.type);\r\n        if (!Array.isArray(selectedTypes) || !selectedTypes.length) {\r\n            return dataArray;\r\n        }\r\n        return dataArray.filter(data => selectedTypes.includes(data.typeOfService));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const renderTableData = async () => {\r\n            console.log(transactions[chains[activeChain].name]);\r\n            const minedTransactions = await transactions[chains[activeChain].name].filter(transaction => transaction.state == \"MINED\");\r\n            console.log(minedTransactions);\r\n\r\n            const transactionsArray = await Promise.all(minedTransactions.map(async (transaction) => {\r\n                let { from, to, fee, amount} = transaction;\r\n\r\n\r\n                const consumerAgent = await agents.filter(agent => agent.account === from);\r\n\r\n                \r\n                let consumer = \"BLOCKCHAIN\";\r\n                if(consumerAgent.length > 0) {\r\n                    const consumerUser = await users[\"users\"].filter(user => user._id === consumerAgent[0].user);\r\n                    consumer = consumerUser[0].name;\r\n                };\r\n                \r\n                \r\n                const providerAgent = await agents.filter(agent => agent.account === minedTransactions[0].to);\r\n                let provider = \"BLOCKCHAIN\";\r\n                if(from != undefined) {\r\n                    \r\n                    const providerUser = await users[\"users\"].filter(user => user._id === providerAgent[0].user);\r\n                    provider = providerUser[0].name;\r\n                };\r\n\r\n                let d = new Date(transaction.createdAt);\r\n                let hours = d.getHours();\r\n                let minutes = d.getMinutes();\r\n                let seconds = d.getSeconds();\r\n                let time = hours + \":\" + minutes + \":\" + seconds;\r\n\r\n                if(transaction.type === \"SERVICE\") {\r\n                    return {\r\n                        id: transaction._id,\r\n                        consumer: consumer,\r\n                        provider: provider,\r\n                        price: transaction.amount,\r\n                        fee: transaction.fee,\r\n                        type: providerAgent[0].type,\r\n                        createdAt: time,\r\n                    }\r\n                }\r\n                    \r\n\r\n                return (\r\n                    {\r\n                        id: transaction._id,\r\n                        consumer: consumer,\r\n                        provider: provider,\r\n                        price: amount,\r\n                        fee: fee,\r\n                        type: transaction.type,\r\n                        createdAt: time,\r\n                    }\r\n                )\r\n                \r\n            }));\r\n            setTableDataArray(transactionsArray);\r\n        };\r\n        renderTableData();\r\n\r\n    }, [game, checkBoxes, orderOfSort]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"table-all-transactions-container\">\r\n                <div className=\"filter-all-transactions\">\r\n                    {\r\n                        checkBoxes.map((item) => (\r\n                            <label className=\"checkbox-container\" key={item.type}>{item.type}\r\n                                <input type=\"checkbox\" name={item.type} checked={item.isChecked} onChange={selectOne}/>\r\n                                <span className=\"checkmark\"></span>\r\n                            </label>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"table-all-transactions-overflow\">\r\n                    <table className=\"table-all-transactions\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th onClick={() => {\r\n                                setSortBy('time');\r\n                                if (orderOfSort === 'ascending') {\r\n                                    setOrderOfSort('descending');\r\n                                } if (orderOfSort === 'descending') {\r\n                                    setOrderOfSort('ascending');\r\n                                }\r\n                            }}>Time {sortBy === 'time' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\r\n                            <th onClick={() => {\r\n                                setSortBy('consumer');\r\n                                if (orderOfSort === 'ascending') {\r\n                                    setOrderOfSort('descending');\r\n                                } if (orderOfSort === 'descending') {\r\n                                    setOrderOfSort('ascending');\r\n                                }\r\n                            }}>Consumer {sortBy === 'consumer' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\r\n                            <th onClick={() => {\r\n                                setSortBy('provider');\r\n                                if (orderOfSort === 'ascending') {\r\n                                    setOrderOfSort('descending');\r\n                                } if (orderOfSort === 'descending') {\r\n                                    setOrderOfSort('ascending');\r\n                                }\r\n                            }}>Provider {sortBy === 'provider' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\r\n                            <th onClick={() => {\r\n                                setSortBy('typeOfService');\r\n                                if (orderOfSort === 'ascending') {\r\n                                    setOrderOfSort('descending');\r\n                                } if (orderOfSort === 'descending') {\r\n                                    setOrderOfSort('ascending');\r\n                                }\r\n                            }}>Type of service {sortBy === 'typeOfService' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\r\n                            <th onClick={() => {\r\n                                setSortBy('price');\r\n                                if (orderOfSort === 'ascending') {\r\n                                    setOrderOfSort('descending');\r\n                                } if (orderOfSort === 'descending') {\r\n                                    setOrderOfSort('ascending');\r\n                                }\r\n                            }}>Price/Amount {sortBy === 'price' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\r\n                            <th onClick={() => {\r\n                                setSortBy('txFee');\r\n                                if (orderOfSort === 'ascending') {\r\n                                    setOrderOfSort('descending');\r\n                                } if (orderOfSort === 'descending') {\r\n                                    setOrderOfSort('ascending');\r\n                                }\r\n                            }}>Tx Fee {sortBy === 'txFee' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            tableDataArray.map((item) =>\r\n                                (\r\n                                    <tr key={item.id}>\r\n                                        <td>{item.createdAt}</td>\r\n                                        <td>{item.consumer}</td>\r\n                                        <td>{item.provider}</td>\r\n                                        <td>{item.type}</td>\r\n                                        <td>{item.price}</td>\r\n                                        <td>{item.fee}</td>\r\n                                    </tr>\r\n                                )\r\n                            )\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AllTransactionsTable","import React, {useState, useEffect, useContext} from 'react';\r\nimport { AppContext } from '../../../context/context';\r\nimport {InputGroup, FormControl, Button, Spinner} from \"react-bootstrap\";\r\nimport PieChart from './PieChart';\r\nimport TransactionsTable from './TransactionTable';\r\nimport AllTransactionsTable from './TransactionTableAll';\r\n\r\n\r\n\r\nconst BlockchainData = () => {\r\n    const context = useContext(AppContext);\r\n    const [chartDataArray, setChartDataArray] = useState([]);\r\n    const [relativeStake, setRelativeStake] = useState(0);\r\n    const [newStake, setNewStake] = useState(\"0\");\r\n    const [txFee, setTxFee] = useState(\"0\");\r\n    const [loadingStake, setLoadingStake] = useState(false);\r\n    const [loadingUnstake, setLoadingUnstake] = useState(false);\r\n\r\n    const countDecimals = (value) => {\r\n        if(Math.floor(value).toString() === value) return 0;\r\n        return value.toString().split(\".\")[1].length || 0;\r\n    };\r\n\r\n    const confirmStake = async () => {\r\n        try {\r\n            let numCheck; \r\n            await import('../HelperFunctions/functions')\r\n            .then(async({ checkNumber }) => {\r\n                numCheck = await checkNumber(txFee, newStake, context.usersBalances[context.activeChain][`${context.chains[context.activeChain].name}`])\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n            if (numCheck.state == -1) {\r\n                context.setNote((prevState) => {\r\n                    return({\r\n                      ...prevState,\r\n                      msg: numCheck.msg,\r\n                      heading: 'Wrong input',\r\n                      show: true,\r\n                      type: 'danger'\r\n                    });\r\n                  });\r\n            } else {\r\n                setLoadingStake(true);\r\n\r\n                const data = {\r\n                    amount: newStake,\r\n                    fee: txFee,\r\n                    chainId: context.chains[context.activeChain].id\r\n                };\r\n\r\n                let response = await context.apiUserStake(context.cookies.userId, data);\r\n\r\n                context.setNote((prevState) => {\r\n                    return({\r\n                      ...prevState,\r\n                      msg: response,\r\n                      heading: 'Success',\r\n                      show: true,\r\n                      type: 'success'\r\n                    });\r\n                  });\r\n\r\n                setLoadingStake(false);\r\n                setNewStake(\"0\");\r\n                setTxFee(\"0\");\r\n                    \r\n\r\n            }\r\n\r\n        } catch(e) {\r\n            setLoadingStake(false);\r\n            context.setNote({\r\n                show: true,\r\n                type: \"danger\",\r\n                msg: e.response.data.message,\r\n                heading: \"Could not stake! \"\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n \r\n    const confirmUnstake = async () => {\r\n        try {\r\n            let numCheck; \r\n            await import('../HelperFunctions/functions')\r\n            .then(async({ checkNumber }) => {\r\n                numCheck = await checkNumber(txFee, newStake, context.usersBalances[context.activeChain][`${context.chains[context.activeChain].name}`])\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n            if (numCheck.state == -1) {\r\n                context.setNote((prevState) => {\r\n                    return({\r\n                      ...prevState,\r\n                      msg: numCheck.msg,\r\n                      heading: 'Wrong input',\r\n                      show: true,\r\n                      type: 'danger'\r\n                    });\r\n                  });\r\n            } else {\r\n                setLoadingStake(true);\r\n\r\n                const data = {\r\n                    amount: newStake,\r\n                    fee: txFee,\r\n                    chainId: context.chains[context.activeChain].id\r\n                };\r\n\r\n                let response = await context.apiUserUnstake(context.cookies.userId, data);\r\n\r\n                context.setNote((prevState) => {\r\n                    return({\r\n                      ...prevState,\r\n                      msg: \"Sussessfully staked\",\r\n                      heading: 'Success',\r\n                      show: true,\r\n                      type: 'success'\r\n                    });\r\n                  });\r\n\r\n                setLoadingStake(false);\r\n                setNewStake(\"0\");\r\n                setTxFee(\"0\");\r\n                    \r\n\r\n            }\r\n\r\n        } catch(e) {\r\n            setLoadingStake(false);\r\n            context.setNote({\r\n                show: true,\r\n                type: \"danger\",\r\n                msg: e.response.data.message,\r\n                heading: \"Could not unstake! \"\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(context.chains[0].name !== \"NULL\") {\r\n            if (context.chains[context.cookies.activeChain].stake == 0 ||  context.chains[context.cookies.activeChain].stake == undefined) {\r\n                setRelativeStake(0);\r\n            } else {\r\n                setRelativeStake(((context.usersStakes[context.chains[context.cookies.activeChain].name] / context.chains[context.cookies.activeChain].stake) * 100).toFixed(1));\r\n            } \r\n        } else {\r\n            setRelativeStake(0);\r\n        }\r\n\r\n\r\n        const createDataArray = async () => { \r\n            const dataArray = await context.users[\"users\"].map((item) => {\r\n                return({\r\n                    id: item.name,\r\n                    label: item.name,\r\n                    value: item.stake\r\n                });\r\n            });\r\n            // console.log(\"USERS:  \" + users);\r\n            setChartDataArray(dataArray);\r\n            console.log(dataArray);\r\n        };\r\n        createDataArray();\r\n\r\n    }, [context.users]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex flex-column\" style={{padding: \"5px\"}}>\r\n                <div className=\"d-flex\">\r\n                    <TransactionsTable/>\r\n                    <div className=\"d-flex flex-column align-items-center justify-content-center\" style={{width: \"100%\", margin: \"5px\", justifyContent: \"space-evenly\", borderRadius: \"8px\", boxShadow: \"var(--light-shadow)\", paddingRight: \"5px\", zIndex: 1}}>\r\n                    \r\n                        \r\n                        <div className=\"d-flex flex-column\"  style={{textAlign: \"center\", paddingTop: \"7px\"}}>\r\n                            <h3> Stake on <span style={{color: 'red'}}> {context.chains[context.cookies.activeChain].name} </span> Chain </h3>\r\n                            <h4>Your stake: {context.usersStakes[context.chains[context.cookies.activeChain].name]} ({relativeStake}%)</h4>         \r\n                        </div>\r\n\r\n                        <div className=\"d-flex\" style={{width: \"100%\", height: \"100%\", minWidth: \"20%\"}}>\r\n\r\n                            <div style={{margin: \"auto\", width: \"35vh\", height: \"30vh\"}}>\r\n                                <PieChart data={chartDataArray}/>\r\n                            </div>\r\n                            <div className=\"d-flex flex-column\" style={{justifyContent: \"center\", alignItems: \"center\", zIndex: 1}}>\r\n                            \r\n                                    <InputGroup style={{paddingBottom: \"15px\"}}>\r\n                                        <InputGroup.Text id=\"d-flex\" style={{fontSize: \"1.2rem\", borderRadius: \"8px 0 0 8px\"}}>Amount</InputGroup.Text>\r\n                                        <FormControl value ={newStake} placeholder={\"Enter amount\"} onChange={e => setNewStake(e.target.value)} style={{borderRadius: \"0px 8px 8px 0\"}}></FormControl>\r\n                                    </InputGroup>\r\n\r\n                                    <InputGroup style={{paddingBottom: \"15px\"}}>\r\n                                        <InputGroup.Text id=\"d-flex\" style={{fontSize: \"1.2rem\", borderRadius: \"8px 0 0 8px\"}}>Fee</InputGroup.Text>\r\n                                        <FormControl value ={txFee} placeholder={\"Enter amount\"} onChange={e => setTxFee(e.target.value)} style={{borderRadius: \"0px 8px 8px 0\"}}></FormControl>\r\n                                    </InputGroup>\r\n\r\n\r\n                                \r\n                                \r\n                                <Button variant=\"success\"  onClick={confirmStake} style={{padding: \"0.3rem 2rem\", margin: \"5px\", fontSize: \"1.2rem\", borderRadius: \"8px\"}}>\r\n                                {loadingStake ? (\r\n                                        <div>\r\n                                            <Spinner\r\n                                            as=\"span\"\r\n                                            animation=\"grow\"\r\n                                            size=\"sm\"\r\n                                            role=\"status\"\r\n                                            aria-hidden=\"true\"\r\n                                        />\r\n\r\n                                            <text> STAKE  </text>\r\n\r\n                                        </div>\r\n                                    ) : (\r\n                                        <text> STAKE  </text>\r\n                                    )\r\n                                    \r\n                                    } \r\n                                </Button>\r\n                                \r\n                                <Button variant='warning'  onClick={confirmUnstake} style={{padding: \"0.3rem 1.2rem\", margin: \"5px\", fontSize: \"1.2rem\", borderRadius: \"8px\"}}>\r\n                                {loadingUnstake ? (\r\n                                        <div>\r\n                                            <Spinner\r\n                                            as=\"span\"\r\n                                            animation=\"grow\"\r\n                                            size=\"sm\"\r\n                                            role=\"status\"\r\n                                            aria-hidden=\"true\"\r\n                                        />\r\n\r\n                                            <text> UNSTAKE  </text>\r\n\r\n                                        </div>\r\n                                    ) : (\r\n                                        <text> UNSTAKE  </text>\r\n                                    )\r\n                                    \r\n                                } \r\n                                \r\n                                \r\n                                </Button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        {/* <div className=\"d-flex align-items-center justify-content-center\" style={{zIndex: 2, position: \"absolute\"}}>\r\n                                    <NoteDismissible show={context.note.show}\r\n                                        msg={context.note.msg}\r\n                                        variant={context.note.type}\r\n                                        heading={context.note.heading}\r\n                                        reportHide={() => {\r\n                                            context.setNote({...(context.note.show = false)});\r\n                                        }}/>\r\n                                </div> */}\r\n                    </div>\r\n                   \r\n                </div>\r\n                <div style={{backgroundColor: \"rgba(255, 255, 255, 0.8)\", boxShadow: \"var(--light-shadow)\", borderRadius: \"8px\", margin: \"5px\", textAlign: \"center\"}}>\r\n                    <h3>Transactions History</h3>\r\n                    <AllTransactionsTable/>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BlockchainData"],"names":["data","context","useContext","AppContext","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","defs","id","type","background","color","size","padding","stagger","rotation","lineWidth","spacing","fill","match","user","name","chainMain","useGlobalContext","useState","timeLeft","setTimeLeft","width","setWidth","millisToMinutesAndSeconds","millis","d","Date","Math","round","getUTCMinutes","getUTCSeconds","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","miningTime","getTime","createdMillis","now","floor","className","style","game","users","agents","openConfirmModal","setConfirmModalContent","transactions","chains","activeChain","tableDataArray","setTableDataArray","renderTableData","console","log","filter","transaction","state","orderTransactions","sort","a","b","parseInt","fee","transactionsByFee","Promise","all","map","to","amount","agent","account","consumerAgent","_id","consumerUser","providerAgent","length","consumer","provider","price","undefined","providerUser","transactionsArray","calculateTimeLeft","item","index","playerName","onClick","place","effect","typeOfService","sortBy","setSortBy","orderOfSort","setOrderOfSort","isChecked","checkBoxes","setCheckBoxes","selectOne","e","itemName","target","checked","newArray","minedTransactions","createdAt","hours","getHours","minutes","getMinutes","seconds","getSeconds","time","onChange","chartDataArray","setChartDataArray","relativeStake","setRelativeStake","newStake","setNewStake","txFee","setTxFee","loadingStake","setLoadingStake","loadingUnstake","confirmStake","then","checkNumber","usersBalances","numCheck","catch","err","setNote","prevState","msg","heading","show","chainId","apiUserStake","cookies","userId","response","message","confirmUnstake","apiUserUnstake","stake","usersStakes","toFixed","createDataArray","label","value","dataArray","justifyContent","borderRadius","boxShadow","paddingRight","zIndex","textAlign","paddingTop","height","minWidth","alignItems","InputGroup","paddingBottom","fontSize","FormControl","placeholder","Button","variant","Spinner","as","animation","role","backgroundColor"],"sourceRoot":""}